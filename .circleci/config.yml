version: 2.1
orbs: 
  slack: circleci/slack@4.9.4

#workflows:
#  send-notification:
#    jobs:
#      - notify:
#          context: udacity


executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.9.0-alpine
  aws:
    docker:
      - image: amazon/aws-cli
      
commands:
  destroy_environment:
    description: Destroy Cloud Formation Stacks and infrastructure
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Destroy udapeople backend cfn stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
          environment:
            TERM: xterm-256color
          when: on_fail
      - run:
          name: Destroy udapeople frontend cfn stack and S3 bucket
          command: |
            aws s3 rm s3://udapeople-kk1j287dhjppmz43780 --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
          environment:
              TERM: xterm-256color
          when: on_fail
      
  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          working_directory: ./backend
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/7ba7qPivESWJNPB5WWBL8z/migration_$\{CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            if [[ "$SUCCESS" == "success" ]]
            then
              pwd
              ls -la
              npm run migrations:revert
            fi
          when: on_fail

jobs:

  install-backend-dependencies:
    executor: node
    steps:
      - checkout
      - run:
          name: npm install - feature test
          working_directory: ./backend
          command: ls -la && npm install
      - persist_to_workspace:
          root: .
          paths:
            - backend/node_modules


  install-frontend-dependencies:
   executor: node
   steps:
      - checkout
      - run:
          name: npm install - feature test
          working_directory: ./frontend
          command: ls -la && npm install
      - persist_to_workspace:
          root: .
          paths:
            - frontend/node_modules


  build-backend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: npm run build
          working_directory: ./backend
          command: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - backend/dist


  build-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: npm run build
          working_directory: ./frontend
          command: npm run build


  test-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install junit coverage reporter
          working_directory: ./frontend
          command: npm install --save-dev jest-junit
      - run:
          name: Run tests with JUnit as reporter
          working_directory: ./frontend
          command: npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd && ls -la /tmp
          
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./test_results
      - store_test_results:
          path: ./frontend/test_results
      - store_artifacts:
          path: ./frontend/test_results


  test-backend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install junit coverage reporter
          working_directory: ./backend
          command: npm install --save-dev jest-junit
      - run:
          name: Run tests with JUnit as reporter
          working_directory: ./backend
          command: npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./test_results
      - store_test_results:
          path: ./backend/test_results
      - store_artifacts:
          path: ./backend/test_results


  scan-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Check Frontend against security vulnerabilities
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Check Backend against security vulnerabilities
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Getting the old workflow id
          command: |

            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            
            echo "OldWorkflowID: $OldWorkflowID"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

            # storing old workflow id value in KVDB
            curl https://kvdb.io/7ba7qPivESWJNPB5WWBL8z/OldWorkflowID_${CIRCLE_WORKFLOW_ID:0:7} -d ${OldWorkflowID}
            echo KVDB Old Workflow is: $(curl --insecure  https://kvdb.io/7ba7qPivESWJNPB5WWBL8z/OldWorkflowID_${CIRCLE_WORKFLOW_ID:0:7})

            # Fetch the stack names
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo stacks: ${STACKS[@]}

            # storing Stacks value in KVDB
            if [[ "${STACKS}"  != "" ]]
            then
              curl https://kvdb.io/7ba7qPivESWJNPB5WWBL8z/Stacks_${CIRCLE_WORKFLOW_ID:0:7}  -d '${STACKS}'
            else
              curl -k https://kvdb.io/7ba7qPivESWJNPB5WWBL8z/Stacks_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            fi
            echo KVDB Stacks are: $(curl --insecure  https://kvdb.io/7ba7qPivESWJNPB5WWBL8z/Stacks_${CIRCLE_WORKFLOW_ID:0:7})
            
      - run:
          name: Deploy backend infrastructure
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file backend.yaml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
          #  echo "${API_URL}"
      - run:
          name: Deploy frontend infrastructure
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file frontend.yaml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add backend ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  configure-infrastructure:
    #executor: python
    docker:
      - image: python:3.9.0-alpine
        environment:
          NODE_ENV: "local"
          VERSION: "1"
          ENVOIRONMENT: "production"
          TYPEORM_CONNECTION: $TYPEORM_CONNECTION
    steps:
      - checkout
      - jq/install  
      - add_ssh_keys:
          fingerprints: ["6d:75:a6:85:aa:48:6e:9e:0f:22:7a:f4:ed:0b:44:42"] 
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            ansible --version
            cat .circleci/ansible/inventory.txt
      - run:
          command: "#!/bin/sh\nJQ_PATH=/usr/local/bin/jq\n\nBuildMessageBody() {\n    # Send message\n    #   If sending message, default to custom template,\n    #   if none is supplied, check for a pre-selected template value.\n    #   If none, error.\n    if [ -n \"${SLACK_PARAM_CUSTOM:-}\" ]; then\n        ModifyCustomTemplate\n        # shellcheck disable=SC2016\n        CUSTOM_BODY_MODIFIED=$(echo \"$CUSTOM_BODY_MODIFIED\" | sed 's/\\\\/\\\\\\\\/g' | sed 's/\"/\\\\\"/g' | sed 's/`/\\\\`/g')\n        T2=$(eval echo \\\"\"$CUSTOM_BODY_MODIFIED\"\\\")\n    else\n        # shellcheck disable=SC2154\n        if [ -n \"${SLACK_PARAM_TEMPLATE:-}\" ]; then TEMPLATE=\"\\$$SLACK_PARAM_TEMPLATE\"\n        elif [ \"$CCI_STATUS\" = \"pass\" ]; then TEMPLATE=\"\\$basic_success_1\"\n        elif [ \"$CCI_STATUS\" = \"fail\" ]; then TEMPLATE=\"\\$basic_fail_1\"\n        else echo \"A template wasn't provided nor is possible to infer it based on the job status. The job status: '$CCI_STATUS' is unexpected.\"; exit 1\n        fi\n\n        [ -z \"${SLACK_PARAM_TEMPLATE:-}\" ] && echo \"No message template was explicitly chosen. Based on the job status '$CCI_STATUS' the template '$TEMPLATE' will be used.\"\n\n        # shellcheck disable=SC2016\n        T1=$(eval echo \"$TEMPLATE\" | sed 's/\\\\/\\\\\\\\/g' | sed 's/\"/\\\\\"/g' | sed 's/`/\\\\`/g')\n        T2=$(eval echo \\\"\"$T1\"\\\")\n    fi\n    # Insert the default channel. THIS IS TEMPORARY\n    T2=$(echo \"$T2\" | jq \". + {\\\"channel\\\": \\\"$SLACK_DEFAULT_CHANNEL\\\"}\")\n    SLACK_MSG_BODY=$T2\n}\n\nPostToSlack() {\n    # Post once per channel listed by the channel parameter\n    #    The channel must be modified in SLACK_MSG_BODY\n\n    # shellcheck disable=SC2001\n    for i in $(eval echo \\\"\"$SLACK_PARAM_CHANNEL\"\\\" | sed \"s/,/ /g\")\n    do\n        echo \"Sending to Slack Channel: $i\"\n        SLACK_MSG_BODY=$(echo \"$SLACK_MSG_BODY\" | jq --arg channel \"$i\" '.channel = $channel')\n        if [ -n \"${SLACK_PARAM_DEBUG:-}\" ]; then\n            printf \"%s\\n\" \"$SLACK_MSG_BODY\" > \"$SLACK_MSG_BODY_LOG\"\n            echo \"The message body being sent to Slack can be found below. To view redacted values, rerun the job with SSH and access: ${SLACK_MSG_BODY_LOG}\"\n            echo \"$SLACK_MSG_BODY\"\n        fi\n        SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H \"Authorization: Bearer $SLACK_ACCESS_TOKEN\" --data \"$SLACK_MSG_BODY\" https://slack.com/api/chat.postMessage)\n        \n        if [ -n \"${SLACK_PARAM_DEBUG:-}\" ]; then\n            printf \"%s\\n\" \"$SLACK_SENT_RESPONSE\" > \"$SLACK_SENT_RESPONSE_LOG\"\n            echo \"The response from the API call to Slack can be found below. To view redacted values, rerun the job with SSH and access: ${SLACK_SENT_RESPONSE_LOG}\"\n            echo \"$SLACK_SENT_RESPONSE\"\n        fi\n\n        SLACK_ERROR_MSG=$(echo \"$SLACK_SENT_RESPONSE\" | jq '.error')\n        if [ ! \"$SLACK_ERROR_MSG\" = \"null\" ]; then\n            echo \"Slack API returned an error message:\"\n            echo \"$SLACK_ERROR_MSG\"\n            echo\n            echo\n            echo \"View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup\"\n            if [ \"$SLACK_PARAM_IGNORE_ERRORS\" = \"0\" ]; then\n                exit 1\n            fi\n        fi\n    done\n}\n\nModifyCustomTemplate() {\n    # Inserts the required \"text\" field to the custom json template from block kit builder.\n    if [ \"$(echo \"$SLACK_PARAM_CUSTOM\" | jq '.text')\" = \"null\" ]; then\n        CUSTOM_BODY_MODIFIED=$(echo \"$SLACK_PARAM_CUSTOM\" | jq '. + {\"text\": \"\"}')\n    else\n        # In case the text field was set manually.\n        CUSTOM_BODY_MODIFIED=$(echo \"$SLACK_PARAM_CUSTOM\" | jq '.')\n    fi\n}\n\nInstallJq() {\n    echo \"Checking For JQ + CURL\"\n    if command -v curl >/dev/null 2>&1 && ! command -v jq >/dev/null 2>&1; then\n        uname -a | grep Darwin > /dev/null 2>&1 && JQ_VERSION=jq-osx-amd64 || JQ_VERSION=jq-linux32\n        curl -Ls -o \"$JQ_PATH\" https://github.com/stedolan/jq/releases/download/jq-1.6/\"${JQ_VERSION}\"\n        chmod +x \"$JQ_PATH\"\n        command -v jq >/dev/null 2>&1\n        return $?\n    else\n        command -v curl >/dev/null 2>&1 || { echo >&2 \"SLACK ORB ERROR: CURL is required. Please install.\"; exit 1; }\n        command -v jq >/dev/null 2>&1 || { echo >&2 \"SLACK ORB ERROR: JQ is required. Please install\"; exit 1; }\n        return $?\n    fi\n}\n\nFilterBy() {\n    if [ -z \"$1\" ] || [ -z \"$2\" ]; then\n      return\n    fi\n\n    # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.\n    FLAG_MATCHES_FILTER=\"false\"\n    for i in $(echo \"$1\" | sed \"s/,/ /g\")\n    do\n        if echo \"$2\" | grep -Eq \"^${i}$\"; then\n            FLAG_MATCHES_FILTER=\"true\"\n            break\n        fi\n    done\n    if [ \"$FLAG_MATCHES_FILTER\" = \"false\" ]; then\n        # dont send message.\n        echo \"NO SLACK ALERT\"\n        echo\n        echo \"Current reference \\\"$2\\\" does not match any matching parameter\"\n        echo \"Current matching pattern: $1\"\n        exit 0\n    fi\n}\n\nSetupEnvVars() {\n    echo \"BASH_ENV file: $BASH_ENV\"\n    if [ -f \"$BASH_ENV\" ]; then\n        echo \"Exists. Sourcing into ENV\"\n        # shellcheck disable=SC1090\n        . $BASH_ENV\n    else\n        echo \"Does Not Exist. Skipping file execution\"\n    fi\n}\n\nCheckEnvVars() {\n    if [ -n \"${SLACK_WEBHOOK:-}\" ]; then\n        echo \"It appears you have a Slack Webhook token present in this job.\"\n        echo \"Please note, Webhooks are no longer used for the Slack Orb (v4 +).\"\n        echo \"Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup\"\n    fi\n    if [ -z \"${SLACK_ACCESS_TOKEN:-}\" ]; then\n        echo \"In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable.\"\n        echo \"Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup\"\n        exit 1\n    fi\n    # If no channel is provided, quit with error\n    if [ -z \"${SLACK_PARAM_CHANNEL:-}\" ]; then\n       echo \"No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter\"\n       exit 1\n    fi\n}\n\nShouldPost() {\n    if [ \"$CCI_STATUS\" = \"$SLACK_PARAM_EVENT\" ] || [ \"$SLACK_PARAM_EVENT\" = \"always\" ]; then\n        # In the event the Slack notification would be sent, first ensure it is allowed to trigger\n        # on this branch or this tag.\n        FilterBy \"$SLACK_PARAM_BRANCHPATTERN\" \"${CIRCLE_BRANCH:-}\"\n        FilterBy \"$SLACK_PARAM_TAGPATTERN\" \"${CIRCLE_TAG:-}\"\n\n        echo \"Posting Status\"\n    else\n        # dont send message.\n        echo \"NO SLACK ALERT\"\n        echo\n        echo \"This command is set to send an alert on: $SLACK_PARAM_EVENT\"\n        echo \"Current status: ${CCI_STATUS}\"\n        exit 0\n    fi\n}\n\nSetupLogs() {\n    if [ -n \"${SLACK_PARAM_DEBUG:-}\" ]; then\n        LOG_PATH=\"$(mktemp -d 'slack-orb-logs.XXXXXX')\"\n        SLACK_MSG_BODY_LOG=\"$LOG_PATH/payload.json\"\n        SLACK_SENT_RESPONSE_LOG=\"$LOG_PATH/response.json\"\n\n        touch \"$SLACK_MSG_BODY_LOG\" \"$SLACK_SENT_RESPONSE_LOG\"\n        chmod 0600 \"$SLACK_MSG_BODY_LOG\" \"$SLACK_SENT_RESPONSE_LOG\"\n    fi\n}\n\n# Will not run if sourced from another script.\n# This is done so this script may be tested.\nORB_TEST_ENV=\"bats-core\"\nif [ \"${0#*\"$ORB_TEST_ENV\"}\" = \"$0\" ]; then\n    SetupEnvVars\n    SetupLogs\n    CheckEnvVars\n    . \"/tmp/SLACK_JOB_STATUS\"\n    ShouldPost\n    InstallJq\n    BuildMessageBody\n    PostToSlack\nfi\n"      
      - slack/notify:
          channel: devops
          event: pass
          template: success_tagged_deploy_1

      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yaml

      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  run-migrations:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            npm install
            npm run build
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt

      - run:
          name: Send migration results to kvdb.io
          working_directory: ./backend
          command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                echo "has been done successfully"
                curl -k https://kvdb.io/7ba7qPivESWJNPB5WWBL8z/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              else
                echo "has failed"
                curl -k https://kvdb.io/7ba7qPivESWJNPB5WWBL8z/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'  
              fi
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  deploy-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            sudo apt-get install curl
            sudo apt-get install tar 
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Rebuild frontend with backend API Url
          working_directory: ./frontend
          command: |
            export API_URL=$(curl --insecure https://kvdb.io/7ba7qPivESWJNPB5WWBL8z/migration_$\{CIRCLE_WORKFLOW_ID:0:7})
            echo "${API_URL}"
            npm run build
      - run:
          name: Deploy frontend objects to S3
          working_directory: ./frontend
          command: |
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail


  deploy-backend:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["6d:75:a6:85:aa:48:6e:9e:0f:22:7a:f4:ed:0b:44:421"]
      - attach_workspace:
          at: .
  
      - run:
          name: Install dependencies
          #working_directory: /tmp
          command: |
            apk add --update  ansible gzip tar npm curl rsync openssh nodejs
            pip install awscli
            ansible --version
            aws --version
      - run:
          name: updating env variables
          command: |
            echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> backend/.env
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> backend/.env
            echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" >> backend/.env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> backend/.env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> backend/.env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> backend/.env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> backend/.env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env
            echo "ENVIRONMENT: production" >> backend/.env
      - run:
          name: Package Backend
          command: |
            cd backend
            npm i
            npm run build
            cd .. 
            tar -C backend -czvf artifact.tar.gz .
            mkdir -v .circleci/ansible/roles/deploy/files
            cp artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible/roles/deploy/files
            ls
            cd ~

      - run:
          name: Deploy backend
         
          command: |           
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is --------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yaml -vvv
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  smoke-test:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Backend smoke test.
          working_directory: ./backend
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
               return 0
            else
               return 1
            fi

      - run:
          name: Frontend smoke test.
          working_directory: ./backend
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-east-1.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail


  cloudfront-update:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Store old WorkflowID in kvdb for cleanup phase
          working_directory: ./.circleci/files
          command: |
            WorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            curl -k https://kvdb.io/7ba7qPivESWJNPB5WWBL8z/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
      - run:
          name: Update cloudfront distribution
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file cloudfront.yaml \
              --stack-name udapeople-cloudfront-production \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  cleanup:
    executor: aws
    steps:
      - checkout
      - run:
          name: Get old stack workflow id from KVDB and delete related stacks and files and Clean up old environment
          command: |
            export OldWorkflowID=$(curl --insecure  https://kvdb.io/7ba7qPivESWJNPB5WWBL8z/OldWorkflowID_${CIRCLE_WORKFLOW_ID:0:7})

            echo "OldWorkflowID: $OldWorkflowID"      
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"           

            export STACKS=$(curl --insecure  https://kvdb.io/7ba7qPivESWJNPB5WWBL8z/Stacks_${CIRCLE_WORKFLOW_ID:0:7})
            echo Stacks: "${STACKS}"
            
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              if [[ "${STACKS}"  != 0 ]]    
              then
                echo "cleanup is required"
                aws s3 rb "s3://udapeople-${OldWorkflowID}" --force
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              else
                echo 'cleanup is not applicable'
              fi
            else  
              echo 'cleanup is not applicable'
            fi
          environment:
            TERM: xterm-256color

workflows:
  default:
    jobs:
      ## BUILD AND DEPLOY
      - install-backend-dependencies
      - install-frontend-dependencies

      - build-backend:
          requires:
            - install-backend-dependencies
      - build-frontend:
          requires:
            - install-frontend-dependencies
      - test-backend:
          requires:
            - build-backend
      - test-frontend:
          requires:
            -  build-frontend
      - scan-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend

      ### INFRASTRUCTURE
      - deploy-infrastructure:
          filters:
            branches:
              only:
                - master
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
            - test-backend
            - test-frontend
            - scan-backend
            - scan-frontend
          context:
            - udacity

      - run-migrations:
          requires:
            - test-backend
            - test-frontend
            - scan-backend
            - scan-frontend
            - configure-infrastructure
          filters:
            branches:
              only:
                - master
      - deploy-backend:
          requires:
            - run-migrations
      - deploy-frontend:
          requires:
            - run-migrations
      - smoke-test:
          requires:
            - deploy-backend
            - deploy-frontend
      - cloudfront-update:
          requires:
            - smoke-test
      - cleanup:
          requires:
           - cloudfront-update
